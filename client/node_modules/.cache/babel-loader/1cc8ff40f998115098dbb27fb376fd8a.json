{"ast":null,"code":"import React,{Fragment}from\"react\";import{connect}from\"react-redux\";import{Redirect}from\"react-router-dom\";import{createStructuredSelector}from\"reselect\";import CheckoutItem from\"../../components/checkout-item/checkout-item.component\";import StripeCheckoutButton from\"../../components/stripe-button/stripe-button.component\";import{selectCurrentUser}from\"../../redux/user/user.selectors\";import{selectCartItems,selectCartTotal}from\"../../redux/cart/cart.selectors\";import{CheckoutPageContainer,CheckoutHeaderContainer,HeaderBlockContainer,TotalContainer,TestWarningContainer}from\"./checkoutPage.styles\";import Parallax from\"../../components/parallax/parallax.component\";import Hidden from\"@material-ui/core/Hidden\";var CheckoutPage=function CheckoutPage(_ref){var cartItems=_ref.cartItems,cartTotal=_ref.cartTotal,currentUser=_ref.currentUser,location=_ref.location;// the user must have at least one item in his cart and he must be logged in\nif(currentUser&&cartTotal){return/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(Parallax,{filter:true,image:\"checkOut\"}),/*#__PURE__*/React.createElement(CheckoutPageContainer,null,/*#__PURE__*/React.createElement(Hidden,{xsDown:true},/*#__PURE__*/React.createElement(CheckoutHeaderContainer,{container:true,xs:12},/*#__PURE__*/React.createElement(HeaderBlockContainer,{item:true,sm:2},/*#__PURE__*/React.createElement(\"span\",null,\" Product \")),/*#__PURE__*/React.createElement(HeaderBlockContainer,{item:true,sm:3},/*#__PURE__*/React.createElement(\"span\",null,\" Description \")),/*#__PURE__*/React.createElement(HeaderBlockContainer,{item:true,sm:2},/*#__PURE__*/React.createElement(\"span\",null,\" Price \")),/*#__PURE__*/React.createElement(HeaderBlockContainer,{item:true,sm:3},/*#__PURE__*/React.createElement(\"span\",null,\" Quantity \")),/*#__PURE__*/React.createElement(HeaderBlockContainer,{item:true,sm:2},/*#__PURE__*/React.createElement(\"span\",null,\" Remove \")))),cartItems.map(function(item){return/*#__PURE__*/React.createElement(CheckoutItem,{key:item.id,item:item});}),/*#__PURE__*/React.createElement(TotalContainer,null,/*#__PURE__*/React.createElement(\"span\",null,\"Total : $ \",cartTotal)),/*#__PURE__*/React.createElement(TestWarningContainer,null,\"*Please use the following test credit card for payments*\",/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"span\",{className:\"underlined\"},\"Card Number\"),\" : 4242 4242 4242 4242 \",/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"span\",{className:\"underlined\"},\"Exp\"),\" : 12/34 \",/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"span\",{className:\"underlined\"},\"CVV\"),\" : 555\"),/*#__PURE__*/React.createElement(StripeCheckoutButton,{price:cartTotal})));}// if the cart is empty ... no need to stay on the checkuot page\nelse if(cartTotal!==0){return/*#__PURE__*/React.createElement(Redirect,{to:{pathname:\"/sign-in\",state:{prevPath:location.pathname}}});}// the following code is for us to get back to our checkout page after logging in\nreturn/*#__PURE__*/React.createElement(Redirect,{to:\"./\"});};var mapStateToProps=createStructuredSelector({cartItems:selectCartItems,cartTotal:selectCartTotal,currentUser:selectCurrentUser});export default connect(mapStateToProps)(CheckoutPage);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/tuto/E-Com Store/client/src/views/checkoutPage/checkoutPage.component.jsx"],"names":["React","Fragment","connect","Redirect","createStructuredSelector","CheckoutItem","StripeCheckoutButton","selectCurrentUser","selectCartItems","selectCartTotal","CheckoutPageContainer","CheckoutHeaderContainer","HeaderBlockContainer","TotalContainer","TestWarningContainer","Parallax","Hidden","CheckoutPage","cartItems","cartTotal","currentUser","location","map","item","id","pathname","state","prevPath","mapStateToProps"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CAEA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,QAAT,KAAyB,kBAAzB,CACA,OAASC,wBAAT,KAAyC,UAAzC,CAEA,MAAOC,CAAAA,YAAP,KAAyB,wDAAzB,CACA,MAAOC,CAAAA,oBAAP,KAAiC,wDAAjC,CAEA,OAASC,iBAAT,KAAkC,iCAAlC,CAEA,OACEC,eADF,CAEEC,eAFF,KAGO,iCAHP,CAKA,OACEC,qBADF,CAEEC,uBAFF,CAGEC,oBAHF,CAIEC,cAJF,CAKEC,oBALF,KAMO,uBANP,CAQA,MAAOC,CAAAA,QAAP,KAAqB,8CAArB,CAEA,MAAOC,CAAAA,MAAP,KAAmB,0BAAnB,CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAAqD,IAAlDC,CAAAA,SAAkD,MAAlDA,SAAkD,CAAvCC,SAAuC,MAAvCA,SAAuC,CAA5BC,WAA4B,MAA5BA,WAA4B,CAAfC,QAAe,MAAfA,QAAe,CACxE;AACA,GAAID,WAAW,EAAID,SAAnB,CAA8B,CAC5B,mBACE,oBAAC,QAAD,mBACE,oBAAC,QAAD,EAAU,MAAM,KAAhB,CAAiB,KAAK,CAAC,UAAvB,EADF,cAEE,oBAAC,qBAAD,mBACE,oBAAC,MAAD,EAAQ,MAAM,KAAd,eACE,oBAAC,uBAAD,EAAyB,SAAS,KAAlC,CAAmC,EAAE,CAAE,EAAvC,eACE,oBAAC,oBAAD,EAAsB,IAAI,KAA1B,CAA2B,EAAE,CAAE,CAA/B,eACE,4CADF,CADF,cAIE,oBAAC,oBAAD,EAAsB,IAAI,KAA1B,CAA2B,EAAE,CAAE,CAA/B,eACE,gDADF,CAJF,cAOE,oBAAC,oBAAD,EAAsB,IAAI,KAA1B,CAA2B,EAAE,CAAE,CAA/B,eACE,0CADF,CAPF,cAUE,oBAAC,oBAAD,EAAsB,IAAI,KAA1B,CAA2B,EAAE,CAAE,CAA/B,eACE,6CADF,CAVF,cAaE,oBAAC,oBAAD,EAAsB,IAAI,KAA1B,CAA2B,EAAE,CAAE,CAA/B,eACE,2CADF,CAbF,CADF,CADF,CAqBGD,SAAS,CAACI,GAAV,CAAc,SAACC,IAAD,qBACb,oBAAC,YAAD,EAAc,GAAG,CAAEA,IAAI,CAACC,EAAxB,CAA4B,IAAI,CAAED,IAAlC,EADa,EAAd,CArBH,cAwBE,oBAAC,cAAD,mBACE,6CAAiBJ,SAAjB,CADF,CAxBF,cA2BE,oBAAC,oBAAD,8EAEE,8BAFF,cAGE,8BAHF,cAIE,4BAAM,SAAS,CAAC,YAAhB,gBAJF,wCAKO,8BALP,cAME,4BAAM,SAAS,CAAC,YAAhB,QANF,0BAMkD,8BANlD,cAOE,4BAAM,SAAS,CAAC,YAAhB,QAPF,UA3BF,cAoCE,oBAAC,oBAAD,EAAsB,KAAK,CAAEA,SAA7B,EApCF,CAFF,CADF,CA2CD,CACD;AA7CA,IA8CK,IAAIA,SAAS,GAAK,CAAlB,CAAqB,CACxB,mBACE,oBAAC,QAAD,EACE,EAAE,CAAE,CACFM,QAAQ,CAAE,UADR,CAEFC,KAAK,CAAE,CAAEC,QAAQ,CAAEN,QAAQ,CAACI,QAArB,CAFL,CADN,EADF,CAQD,CACD;AACA,mBAAO,oBAAC,QAAD,EAAU,EAAE,CAAC,IAAb,EAAP,CACD,CA5DD,CA8DA,GAAMG,CAAAA,eAAe,CAAGxB,wBAAwB,CAAC,CAC/Cc,SAAS,CAAEV,eADoC,CAE/CW,SAAS,CAAEV,eAFoC,CAG/CW,WAAW,CAAEb,iBAHkC,CAAD,CAAhD,CAMA,cAAeL,CAAAA,OAAO,CAAC0B,eAAD,CAAP,CAAyBX,YAAzB,CAAf","sourcesContent":["import React, { Fragment } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport CheckoutItem from \"../../components/checkout-item/checkout-item.component\";\r\nimport StripeCheckoutButton from \"../../components/stripe-button/stripe-button.component\";\r\n\r\nimport { selectCurrentUser } from \"../../redux/user/user.selectors\";\r\n\r\nimport {\r\n  selectCartItems,\r\n  selectCartTotal,\r\n} from \"../../redux/cart/cart.selectors\";\r\n\r\nimport {\r\n  CheckoutPageContainer,\r\n  CheckoutHeaderContainer,\r\n  HeaderBlockContainer,\r\n  TotalContainer,\r\n  TestWarningContainer,\r\n} from \"./checkoutPage.styles\";\r\n\r\nimport Parallax from \"../../components/parallax/parallax.component\";\r\n\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\n\r\nconst CheckoutPage = ({ cartItems, cartTotal, currentUser, location }) => {\r\n  // the user must have at least one item in his cart and he must be logged in\r\n  if (currentUser && cartTotal) {\r\n    return (\r\n      <Fragment>\r\n        <Parallax filter image=\"checkOut\" />\r\n        <CheckoutPageContainer>\r\n          <Hidden xsDown>\r\n            <CheckoutHeaderContainer container xs={12}>\r\n              <HeaderBlockContainer item sm={2}>\r\n                <span> Product </span>\r\n              </HeaderBlockContainer>\r\n              <HeaderBlockContainer item sm={3}>\r\n                <span> Description </span>\r\n              </HeaderBlockContainer>\r\n              <HeaderBlockContainer item sm={2}>\r\n                <span> Price </span>\r\n              </HeaderBlockContainer>\r\n              <HeaderBlockContainer item sm={3}>\r\n                <span> Quantity </span>\r\n              </HeaderBlockContainer>\r\n              <HeaderBlockContainer item sm={2}>\r\n                <span> Remove </span>\r\n              </HeaderBlockContainer>\r\n            </CheckoutHeaderContainer>\r\n          </Hidden>\r\n\r\n          {cartItems.map((item) => (\r\n            <CheckoutItem key={item.id} item={item} />\r\n          ))}\r\n          <TotalContainer>\r\n            <span>Total : $ {cartTotal}</span>\r\n          </TotalContainer>\r\n          <TestWarningContainer>\r\n            *Please use the following test credit card for payments*\r\n            <br />\r\n            <br />\r\n            <span className=\"underlined\">Card Number</span> : 4242 4242 4242\r\n            4242 <br />\r\n            <span className=\"underlined\">Exp</span> : 12/34 <br />\r\n            <span className=\"underlined\">CVV</span> : 555\r\n          </TestWarningContainer>\r\n          <StripeCheckoutButton price={cartTotal} />\r\n        </CheckoutPageContainer>\r\n      </Fragment>\r\n    );\r\n  }\r\n  // if the cart is empty ... no need to stay on the checkuot page\r\n  else if (cartTotal !== 0) {\r\n    return (\r\n      <Redirect\r\n        to={{\r\n          pathname: \"/sign-in\",\r\n          state: { prevPath: location.pathname },\r\n        }}\r\n      />\r\n    );\r\n  }\r\n  // the following code is for us to get back to our checkout page after logging in\r\n  return <Redirect to=\"./\" />;\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  cartItems: selectCartItems,\r\n  cartTotal: selectCartTotal,\r\n  currentUser: selectCurrentUser,\r\n});\r\n\r\nexport default connect(mapStateToProps)(CheckoutPage);\r\n"]},"metadata":{},"sourceType":"module"}